#nullable enable
Olve.Utilities.Assertions.Assert
Olve.Utilities.Assertions.AssertionError
Olve.Utilities.Assertions.AssertionError.AssertionError(string! message) -> void
Olve.Utilities.AsyncOnStartup.IAsyncOnStartup
Olve.Utilities.AsyncOnStartup.IAsyncOnStartup.OnStartupAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Olve.Utilities.AsyncOnStartup.IAsyncOnStartup.Priority.get -> int
Olve.Utilities.AsyncOnStartup.ServiceProviderExtensions
Olve.Utilities.CollectionExtensions.DictionaryExtensions
Olve.Utilities.CollectionExtensions.EnumerableExtensions
Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions
Olve.Utilities.CollectionExtensions.ISetExtensions
Olve.Utilities.CollectionExtensions.RandomExtensions
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.BidirectionalDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<T1, T2>>? collection = null, System.Collections.Generic.IEqualityComparer<T1>? firstComparer = null, System.Collections.Generic.IEqualityComparer<T2>? secondComparer = null) -> void
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.Clear() -> void
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.Contains(T1 first) -> bool
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.Contains(T2 second) -> bool
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.Count.get -> int
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.FirstValues.get -> System.Collections.Generic.IReadOnlyCollection<T1>!
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.Get(T1 first) -> OneOf.OneOf<T2, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.Get(T2 second) -> OneOf.OneOf<T1, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<T1, T2>>!
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.IsSynced.get -> bool
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.SecondValues.get -> System.Collections.Generic.IReadOnlyCollection<T2>!
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.Set(T1 first, T2 second) -> void
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.TryAdd(T1 first, T2 second) -> bool
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.TryRemove(T1 first) -> bool
Olve.Utilities.Collections.BidirectionalDictionary<T1, T2>.TryRemove(T2 second) -> bool
Olve.Utilities.Collections.IBidirectionalDictionary<T1, T2>
Olve.Utilities.Collections.IBidirectionalDictionary<T1, T2>.Clear() -> void
Olve.Utilities.Collections.IBidirectionalDictionary<T1, T2>.Set(T1 first, T2 second) -> void
Olve.Utilities.Collections.IBidirectionalDictionary<T1, T2>.TryAdd(T1 first, T2 second) -> bool
Olve.Utilities.Collections.IBidirectionalDictionary<T1, T2>.TryRemove(T1 first) -> bool
Olve.Utilities.Collections.IBidirectionalDictionary<T1, T2>.TryRemove(T2 second) -> bool
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Clear() -> void
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Contains(TLeft left, TRight right) -> bool
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Get(TLeft left) -> OneOf.OneOf<System.Collections.Generic.IReadOnlySet<TRight>!, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Get(TRight right) -> OneOf.OneOf<System.Collections.Generic.IReadOnlySet<TLeft>!, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Lefts.get -> System.Collections.Generic.IEnumerable<TLeft>!
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Remove(TLeft left) -> bool
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Remove(TRight right) -> bool
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Rights.get -> System.Collections.Generic.IEnumerable<TRight>!
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Set(TLeft left, System.Collections.Generic.ISet<TRight>! rights) -> void
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Set(TLeft left, TRight right, bool value) -> bool
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Set(TRight right, System.Collections.Generic.ISet<TLeft>! lefts) -> void
Olve.Utilities.Collections.IManyToManyLookup<TLeft, TRight>.Set(TRight right, TLeft left, bool value) -> bool
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Clear() -> void
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Contains(TLeft left, TRight right) -> bool
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Get(TLeft left) -> OneOf.OneOf<System.Collections.Generic.IReadOnlySet<TRight>!, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Get(TRight right) -> OneOf.OneOf<TLeft, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Lefts.get -> System.Collections.Generic.IEnumerable<TLeft>!
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Remove(TLeft left) -> bool
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Remove(TLeft left, TRight right) -> bool
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Remove(TRight right) -> bool
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Rights.get -> System.Collections.Generic.IEnumerable<TRight>!
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Set(TLeft left, System.Collections.Generic.ISet<TRight>! rights) -> void
Olve.Utilities.Collections.IOneToManyLookup<TLeft, TRight>.Set(TLeft left, TRight right, bool value) -> bool
Olve.Utilities.Collections.IReadOnlyBidirectionalDictionary<T1, T2>
Olve.Utilities.Collections.IReadOnlyBidirectionalDictionary<T1, T2>.Contains(T1 first) -> bool
Olve.Utilities.Collections.IReadOnlyBidirectionalDictionary<T1, T2>.Contains(T2 second) -> bool
Olve.Utilities.Collections.IReadOnlyBidirectionalDictionary<T1, T2>.Count.get -> int
Olve.Utilities.Collections.IReadOnlyBidirectionalDictionary<T1, T2>.FirstValues.get -> System.Collections.Generic.IReadOnlyCollection<T1>!
Olve.Utilities.Collections.IReadOnlyBidirectionalDictionary<T1, T2>.Get(T1 first) -> OneOf.OneOf<T2, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.IReadOnlyBidirectionalDictionary<T1, T2>.Get(T2 second) -> OneOf.OneOf<T1, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.IReadOnlyBidirectionalDictionary<T1, T2>.IsSynced.get -> bool
Olve.Utilities.Collections.IReadOnlyBidirectionalDictionary<T1, T2>.SecondValues.get -> System.Collections.Generic.IReadOnlyCollection<T2>!
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Clear() -> void
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Contains(TLeft left, TRight right) -> bool
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Get(TLeft left) -> OneOf.OneOf<System.Collections.Generic.IReadOnlySet<TRight>!, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Get(TRight right) -> OneOf.OneOf<System.Collections.Generic.IReadOnlySet<TLeft>!, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TLeft, TRight>>!
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Lefts.get -> System.Collections.Generic.IEnumerable<TLeft>!
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.ManyToManyLookup(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TLeft, TRight>>? initialItems = null, System.Collections.Generic.IEqualityComparer<TLeft>? leftComparer = null, System.Collections.Generic.IEqualityComparer<TRight>? rightComparer = null) -> void
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Remove(TLeft left) -> bool
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Remove(TRight right) -> bool
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Rights.get -> System.Collections.Generic.IEnumerable<TRight>!
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Set(TLeft left, System.Collections.Generic.ISet<TRight>! rights) -> void
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Set(TLeft left, TRight right, bool value) -> bool
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Set(TRight right, System.Collections.Generic.ISet<TLeft>! lefts) -> void
Olve.Utilities.Collections.ManyToManyLookup<TLeft, TRight>.Set(TRight right, TLeft left, bool value) -> bool
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Clear() -> void
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Contains(TLeft left, TRight right) -> bool
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Get(TLeft left) -> OneOf.OneOf<System.Collections.Generic.IReadOnlySet<TRight>!, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Get(TRight right) -> OneOf.OneOf<TLeft, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TLeft, System.Collections.Generic.IReadOnlySet<TRight>!>>!
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Lefts.get -> System.Collections.Generic.IEnumerable<TLeft>!
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.OneToManyLookup(System.Collections.Generic.IEqualityComparer<TLeft>? leftComparer = null, System.Collections.Generic.IEqualityComparer<TRight>? rightComparer = null) -> void
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Remove(TLeft left) -> bool
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Remove(TLeft left, TRight right) -> bool
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Remove(TRight right) -> bool
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Rights.get -> System.Collections.Generic.IEnumerable<TRight>!
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Set(TLeft left, System.Collections.Generic.ISet<TRight>! rights) -> void
Olve.Utilities.Collections.OneToManyLookup<TLeft, TRight>.Set(TLeft left, TRight right, bool value) -> bool
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>.Contains(T1 first) -> bool
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>.Contains(T2 second) -> bool
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>.Count.get -> int
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>.FirstValues.get -> System.Collections.Generic.IReadOnlyCollection<T1>!
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>.Get(T1 first) -> OneOf.OneOf<T2, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>.Get(T2 second) -> OneOf.OneOf<T1, Olve.Utilities.Types.NotFound>
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<T1, T2>>!
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>.IsSynced.get -> bool
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>.ReadOnlyBidirectionalDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<T1, T2>>! collection) -> void
Olve.Utilities.Collections.ReadOnlyBidirectionalDictionary<T1, T2>.SecondValues.get -> System.Collections.Generic.IReadOnlyCollection<T2>!
Olve.Utilities.Extensions.OneOfTryGetExtensions
Olve.Utilities.IntegerMath2D.DeltaPosition
Olve.Utilities.IntegerMath2D.DeltaPosition.DeltaPosition() -> void
Olve.Utilities.IntegerMath2D.DeltaPosition.DeltaPosition(int X, int Y) -> void
Olve.Utilities.IntegerMath2D.DeltaPosition.X.get -> int
Olve.Utilities.IntegerMath2D.DeltaPosition.X.init -> void
Olve.Utilities.IntegerMath2D.DeltaPosition.Y.get -> int
Olve.Utilities.IntegerMath2D.DeltaPosition.Y.init -> void
Olve.Utilities.IntegerMath2D.Position
Olve.Utilities.IntegerMath2D.Position.Position() -> void
Olve.Utilities.IntegerMath2D.Position.Position(int X, int Y) -> void
Olve.Utilities.IntegerMath2D.Position.X.get -> int
Olve.Utilities.IntegerMath2D.Position.X.init -> void
Olve.Utilities.IntegerMath2D.Position.Y.get -> int
Olve.Utilities.IntegerMath2D.Position.Y.init -> void
Olve.Utilities.IntegerMath2D.Size
Olve.Utilities.IntegerMath2D.Size.Height.get -> int
Olve.Utilities.IntegerMath2D.Size.Height.init -> void
Olve.Utilities.IntegerMath2D.Size.Size() -> void
Olve.Utilities.IntegerMath2D.Size.Size(int Width, int Height) -> void
Olve.Utilities.IntegerMath2D.Size.Width.get -> int
Olve.Utilities.IntegerMath2D.Size.Width.init -> void
Olve.Utilities.Lookup.FrozenLookupBase<TKey, TValue>
Olve.Utilities.Lookup.FrozenLookupBase<TKey, TValue>.ContainsKey(TKey key) -> bool
Olve.Utilities.Lookup.FrozenLookupBase<TKey, TValue>.ContainsValue(TValue value) -> bool
Olve.Utilities.Lookup.FrozenLookupBase<TKey, TValue>.Count.get -> int
Olve.Utilities.Lookup.FrozenLookupBase<TKey, TValue>.FrozenLookupBase(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>! items) -> void
Olve.Utilities.Lookup.FrozenLookupBase<TKey, TValue>.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>!
Olve.Utilities.Lookup.FrozenLookupBase<TKey, TValue>.GetValue(TKey key) -> OneOf.OneOf<TValue, Olve.Utilities.Types.NotFound>
Olve.Utilities.Lookup.FrozenLookupBase<TKey, TValue>.Items.get -> System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>!
Olve.Utilities.Lookup.FrozenLookupBase<TKey, TValue>.Keys.get -> System.Collections.Generic.IReadOnlyCollection<TKey>!
Olve.Utilities.Lookup.FrozenLookupBase<TKey, TValue>.Values.get -> System.Collections.Generic.IReadOnlyCollection<TValue>!
Olve.Utilities.Lookup.IdFrozenLookup<T, TId>
Olve.Utilities.Lookup.IdFrozenLookup<T, TId>.IdFrozenLookup(System.Collections.Generic.IEnumerable<T>! items) -> void
Olve.Utilities.Lookup.IHasId<TId>
Olve.Utilities.Lookup.IHasId<TId>.Id.get -> TId
Olve.Utilities.Operations.AsyncOperationFactory<TOperation, TRequest, TResponse>
Olve.Utilities.Operations.AsyncOperationFactory<TOperation, TRequest, TResponse>.AsyncOperationFactory(System.IServiceProvider! serviceProvider) -> void
Olve.Utilities.Operations.AsyncOperationFactory<TOperation, TRequest, TResponse>.Build() -> TOperation
Olve.Utilities.Operations.AsyncOperationFactory<TOperation, TRequest>
Olve.Utilities.Operations.AsyncOperationFactory<TOperation, TRequest>.AsyncOperationFactory(System.IServiceProvider! serviceProvider) -> void
Olve.Utilities.Operations.AsyncOperationFactory<TOperation, TRequest>.Build() -> TOperation
Olve.Utilities.Operations.IAsyncOperation<TRequest, TResult>
Olve.Utilities.Operations.IAsyncOperation<TRequest, TResult>.ExecuteAsync(TRequest request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Olve.Utilities.Types.Results.Result<TResult>>!
Olve.Utilities.Operations.IAsyncOperation<TRequest>
Olve.Utilities.Operations.IAsyncOperation<TRequest>.ExecuteAsync(TRequest request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Olve.Utilities.Types.Results.Result>!
Olve.Utilities.Operations.IOperation<TRequest, TResult>
Olve.Utilities.Operations.IOperation<TRequest, TResult>.Execute(TRequest request) -> Olve.Utilities.Types.Results.Result<TResult>
Olve.Utilities.Operations.IOperation<TRequest>
Olve.Utilities.Operations.IOperation<TRequest>.Execute(TRequest request) -> Olve.Utilities.Types.Results.Result
Olve.Utilities.Operations.OperationFactory<TOperation, TRequest, TResponse>
Olve.Utilities.Operations.OperationFactory<TOperation, TRequest, TResponse>.Build() -> TOperation
Olve.Utilities.Operations.OperationFactory<TOperation, TRequest, TResponse>.OperationFactory(System.IServiceProvider! serviceProvider) -> void
Olve.Utilities.Operations.OperationFactory<TOperation, TRequest>
Olve.Utilities.Operations.OperationFactory<TOperation, TRequest>.Build() -> TOperation
Olve.Utilities.Operations.OperationFactory<TOperation, TRequest>.OperationFactory(System.IServiceProvider! serviceProvider) -> void
Olve.Utilities.Paginations.PaginatedResult<T>
Olve.Utilities.Paginations.PaginatedResult<T>.Count.get -> int
Olve.Utilities.Paginations.PaginatedResult<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
Olve.Utilities.Paginations.PaginatedResult<T>.HasNextPage.get -> bool
Olve.Utilities.Paginations.PaginatedResult<T>.Next.get -> Olve.Utilities.Paginations.Pagination?
Olve.Utilities.Paginations.PaginatedResult<T>.Page.get -> int
Olve.Utilities.Paginations.PaginatedResult<T>.Page.init -> void
Olve.Utilities.Paginations.PaginatedResult<T>.PageSize.get -> int
Olve.Utilities.Paginations.PaginatedResult<T>.PageSize.init -> void
Olve.Utilities.Paginations.PaginatedResult<T>.PaginatedResult(System.Collections.Generic.IList<T>! items, Olve.Utilities.Paginations.Pagination pagination, int totalCount) -> void
Olve.Utilities.Paginations.PaginatedResult<T>.this[int index].get -> T
Olve.Utilities.Paginations.PaginatedResult<T>.TotalCount.get -> int
Olve.Utilities.Paginations.PaginatedResult<T>.TotalCount.init -> void
Olve.Utilities.Paginations.PaginatedResult<T>.TotalPages.get -> int
Olve.Utilities.Paginations.Pagination
Olve.Utilities.Paginations.Pagination.Offset.get -> int
Olve.Utilities.Paginations.Pagination.Page.get -> int
Olve.Utilities.Paginations.Pagination.Page.init -> void
Olve.Utilities.Paginations.Pagination.PageSize.get -> int
Olve.Utilities.Paginations.Pagination.PageSize.init -> void
Olve.Utilities.Paginations.Pagination.Pagination() -> void
Olve.Utilities.Paginations.Pagination.Pagination(int Page, int PageSize) -> void
Olve.Utilities.Projects.ProjectFileNameHelper
Olve.Utilities.Projects.ProjectFileNameHelper.FileExtension.get -> string!
Olve.Utilities.Projects.ProjectFileNameHelper.FileNameDelimiter.get -> string!
Olve.Utilities.Projects.ProjectFileNameHelper.GetElements(string! fileName, System.StringComparison comparisonType = System.StringComparison.Ordinal) -> System.Collections.Generic.IEnumerable<string!>!
Olve.Utilities.Projects.ProjectFileNameHelper.GetFileName(System.Collections.Generic.IEnumerable<string!>! elements) -> string!
Olve.Utilities.Projects.ProjectFileNameHelper.ProjectFileNameHelper(string? delimiter = null, string? extension = null) -> void
Olve.Utilities.Projects.ProjectFolderHelper
Olve.Utilities.Projects.ProjectFolderHelper.GetSubfolder(string! subfolderName) -> string!
Olve.Utilities.Projects.ProjectFolderHelper.Organization.get -> string!
Olve.Utilities.Projects.ProjectFolderHelper.ProjectFolderExists.get -> bool
Olve.Utilities.Projects.ProjectFolderHelper.ProjectFolderHelper(string! projectName, string! organization = "Olve", System.Environment.SpecialFolder specialFolder = System.Environment.SpecialFolder.CommonApplicationData) -> void
Olve.Utilities.Projects.ProjectFolderHelper.ProjectName.get -> string!
Olve.Utilities.Projects.ProjectFolderHelper.ProjectRootFolder.get -> string!
Olve.Utilities.Projects.ProjectFolderHelper.Search(string! searchPatten) -> System.Collections.Generic.IEnumerable<string!>!
Olve.Utilities.Projects.ProjectFolderHelper.SpecialFolder.get -> System.Environment.SpecialFolder
Olve.Utilities.StringFormatting.DateTimeFormatter
Olve.Utilities.Types.AlreadyExists
Olve.Utilities.Types.AlreadyExists.AlreadyExists() -> void
Olve.Utilities.Types.AlreadyExists<T>
Olve.Utilities.Types.AlreadyExists<T>.AlreadyExists() -> void
Olve.Utilities.Types.Any
Olve.Utilities.Types.Any.Any() -> void
Olve.Utilities.Types.Any<T>
Olve.Utilities.Types.Any<T>.Any() -> void
Olve.Utilities.Types.NotFound
Olve.Utilities.Types.NotFound.NotFound() -> void
Olve.Utilities.Types.NotFound<T>
Olve.Utilities.Types.NotFound<T>.NotFound() -> void
Olve.Utilities.Types.Results.Result
Olve.Utilities.Types.Results.Result.Problems.get -> Olve.Utilities.Types.Results.ResultProblemCollection?
Olve.Utilities.Types.Results.Result.Result() -> void
Olve.Utilities.Types.Results.Result.Succeeded.get -> bool
Olve.Utilities.Types.Results.Result.TryPickProblems(out Olve.Utilities.Types.Results.ResultProblemCollection? problems) -> bool
Olve.Utilities.Types.Results.Result<T>
Olve.Utilities.Types.Results.Result<T>.GetValueOrDefault(T defaultValue) -> T
Olve.Utilities.Types.Results.Result<T>.Problems.get -> Olve.Utilities.Types.Results.ResultProblemCollection?
Olve.Utilities.Types.Results.Result<T>.Result() -> void
Olve.Utilities.Types.Results.Result<T>.Succeeded.get -> bool
Olve.Utilities.Types.Results.Result<T>.TryGetValueOrDefault(out T? value, T defaultValue) -> bool
Olve.Utilities.Types.Results.Result<T>.TryPickProblems(out Olve.Utilities.Types.Results.ResultProblemCollection? problems) -> bool
Olve.Utilities.Types.Results.Result<T>.TryPickProblems(out Olve.Utilities.Types.Results.ResultProblemCollection? problems, out T? value) -> bool
Olve.Utilities.Types.Results.Result<T>.TryPickValue(out T? value) -> bool
Olve.Utilities.Types.Results.Result<T>.TryPickValue(out T? value, out Olve.Utilities.Types.Results.ResultProblemCollection? problems) -> bool
Olve.Utilities.Types.Results.Result<T>.Value.get -> T?
Olve.Utilities.Types.Results.ResultEnumerableExtensions
Olve.Utilities.Types.Results.ResultFuncExtensions
Olve.Utilities.Types.Results.ResultProblem
Olve.Utilities.Types.Results.ResultProblem.Args.get -> object![]!
Olve.Utilities.Types.Results.ResultProblem.Exception.get -> System.Exception?
Olve.Utilities.Types.Results.ResultProblem.Message.get -> string!
Olve.Utilities.Types.Results.ResultProblem.ResultProblem(string! message, params object![]! args) -> void
Olve.Utilities.Types.Results.ResultProblem.ResultProblem(System.Exception? exception, string! message, params object![]! args) -> void
Olve.Utilities.Types.Results.ResultProblem.Severity.get -> int
Olve.Utilities.Types.Results.ResultProblem.Severity.init -> void
Olve.Utilities.Types.Results.ResultProblem.Source.get -> string?
Olve.Utilities.Types.Results.ResultProblem.Source.init -> void
Olve.Utilities.Types.Results.ResultProblem.Tags.get -> string![]!
Olve.Utilities.Types.Results.ResultProblem.Tags.init -> void
Olve.Utilities.Types.Results.ResultProblemCollection
Olve.Utilities.Types.Results.ResultProblemCollection.Append(params System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.ResultProblem!>! resultProblems) -> Olve.Utilities.Types.Results.ResultProblemCollection!
Olve.Utilities.Types.Results.ResultProblemCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<Olve.Utilities.Types.Results.ResultProblem!>!
Olve.Utilities.Types.Results.ResultProblemCollection.Prepend(params System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.ResultProblem!>! resultProblems) -> Olve.Utilities.Types.Results.ResultProblemCollection!
Olve.Utilities.Types.Results.ResultProblemCollection.ResultProblemCollection(params System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.ResultProblem!>! problems) -> void
Olve.Utilities.Types.Skipped
Olve.Utilities.Types.Skipped.Skipped() -> void
Olve.Utilities.Types.Skipped<T>
Olve.Utilities.Types.Skipped<T>.Skipped() -> void
Olve.Utilities.Types.Waiting
Olve.Utilities.Types.Waiting.Waiting() -> void
Olve.Utilities.Types.Waiting<T>
Olve.Utilities.Types.Waiting<T>.Waiting() -> void
Olve.Utilities.Types.Yes
Olve.Utilities.Types.Yes.Yes() -> void
Olve.Utilities.Types.Yes<T>
Olve.Utilities.Types.Yes<T>.Value.get -> T
Olve.Utilities.Types.Yes<T>.Value.init -> void
Olve.Utilities.Types.Yes<T>.Yes() -> void
Olve.Utilities.Types.Yes<T>.Yes(T Value) -> void
override Olve.Utilities.Types.AlreadyExists.ToString() -> string!
override Olve.Utilities.Types.AlreadyExists<T>.ToString() -> string!
override Olve.Utilities.Types.Any.ToString() -> string!
override Olve.Utilities.Types.Any<T>.ToString() -> string!
override Olve.Utilities.Types.NotFound.ToString() -> string!
override Olve.Utilities.Types.NotFound<T>.ToString() -> string!
override Olve.Utilities.Types.Results.ResultProblem.ToString() -> string!
override Olve.Utilities.Types.Skipped.ToString() -> string!
override Olve.Utilities.Types.Skipped<T>.ToString() -> string!
override Olve.Utilities.Types.Waiting.ToString() -> string!
override Olve.Utilities.Types.Waiting<T>.ToString() -> string!
override Olve.Utilities.Types.Yes.ToString() -> string!
override Olve.Utilities.Types.Yes<T>.ToString() -> string!
static Olve.Utilities.Assertions.Assert.IsEmpty<T>(System.Collections.Generic.IEnumerable<T>! collection, string! message = "Collection should be empty.") -> void
static Olve.Utilities.Assertions.Assert.IsNotEmpty<T>(System.Collections.Generic.IEnumerable<T>! collection, string! message = "Collection should not be empty.") -> void
static Olve.Utilities.Assertions.Assert.NotNull<T>(T? value, string! message = "Value cannot be null.") -> void
static Olve.Utilities.Assertions.Assert.That(System.Func<bool>! assertion, string! message) -> void
static Olve.Utilities.AsyncOnStartup.ServiceProviderExtensions.RunAsyncOnStartup(this System.IServiceProvider! serviceProvider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
static Olve.Utilities.CollectionExtensions.DictionaryExtensions.GetOrAdd<TKey, TValue>(this System.Collections.Generic.Dictionary<TKey, TValue>! dictionary, TKey key, System.Func<TValue>! valueFactory) -> TValue
static Olve.Utilities.CollectionExtensions.DictionaryExtensions.GetOrAdd<TKey, TValue>(this System.Collections.Generic.Dictionary<TKey, TValue>! dictionary, TKey key, TValue value) -> TValue
static Olve.Utilities.CollectionExtensions.DictionaryExtensions.TryUpdate<TKey, TValue>(this System.Collections.Generic.Dictionary<TKey, TValue>! dictionary, TKey key, System.Func<TValue, TValue>! update) -> bool
static Olve.Utilities.CollectionExtensions.DictionaryExtensions.TryUpdate<TKey, TValue>(this System.Collections.Generic.Dictionary<TKey, TValue>! dictionary, TKey key, TValue value) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableExtensions.ForEach<T>(this System.Collections.Generic.IEnumerable<T>! enumerable, System.Action<T>! action) -> void
static Olve.Utilities.CollectionExtensions.EnumerableExtensions.ForEach<TIn, TOut>(this System.Collections.Generic.IEnumerable<TIn>! enumerable, System.Func<TIn, TOut>! action) -> System.Collections.Generic.IEnumerable<TOut>!
static Olve.Utilities.CollectionExtensions.EnumerableExtensions.Product(this System.Collections.Generic.IEnumerable<float>! enumerable) -> float
static Olve.Utilities.CollectionExtensions.EnumerableExtensions.TryAsReadOnlySet<T>(this System.Collections.Generic.IEnumerable<T>! enumerable, out System.Collections.Generic.IReadOnlySet<T>? readOnlySet) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableExtensions.TryAsSet<T>(this System.Collections.Generic.IEnumerable<T>! enumerable, out System.Collections.Generic.ISet<T>? set) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT0<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT0<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT0<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT0<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT0<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT0<T0, T1, T2>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT0<T0, T1>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT0<T0>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT1<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT1<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT1<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT1<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT1<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT1<T0, T1, T2>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT1<T0, T1>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT2<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT2<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT2<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT2<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT2<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT2<T0, T1, T2>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT3<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT3<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT3<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT3<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT3<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT4<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT4<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT4<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT4<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT5<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT5<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT5<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT6<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT6<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AllT7<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT0<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT0<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT0<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT0<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT0<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT0<T0, T1, T2>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT0<T0, T1>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT0<T0>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT1<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT1<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT1<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT1<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT1<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT1<T0, T1, T2>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT1<T0, T1>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT2<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT2<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT2<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT2<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT2<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT2<T0, T1, T2>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT3<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT3<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT3<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT3<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT3<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT4<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT4<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT4<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT4<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT5<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT5<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT5<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT6<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT6<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.AnyT7<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> bool
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT0<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> System.Collections.Generic.IEnumerable<T0>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT0<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> System.Collections.Generic.IEnumerable<T0>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT0<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> System.Collections.Generic.IEnumerable<T0>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT0<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> System.Collections.Generic.IEnumerable<T0>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT0<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> System.Collections.Generic.IEnumerable<T0>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT0<T0, T1, T2>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2>>! source) -> System.Collections.Generic.IEnumerable<T0>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT0<T0, T1>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1>>! source) -> System.Collections.Generic.IEnumerable<T0>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT0<T0>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0>>! source) -> System.Collections.Generic.IEnumerable<T0>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT1<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> System.Collections.Generic.IEnumerable<T1>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT1<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> System.Collections.Generic.IEnumerable<T1>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT1<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> System.Collections.Generic.IEnumerable<T1>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT1<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> System.Collections.Generic.IEnumerable<T1>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT1<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> System.Collections.Generic.IEnumerable<T1>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT1<T0, T1, T2>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2>>! source) -> System.Collections.Generic.IEnumerable<T1>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT1<T0, T1>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1>>! source) -> System.Collections.Generic.IEnumerable<T1>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT2<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> System.Collections.Generic.IEnumerable<T2>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT2<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> System.Collections.Generic.IEnumerable<T2>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT2<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> System.Collections.Generic.IEnumerable<T2>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT2<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> System.Collections.Generic.IEnumerable<T2>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT2<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> System.Collections.Generic.IEnumerable<T2>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT2<T0, T1, T2>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2>>! source) -> System.Collections.Generic.IEnumerable<T2>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT3<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> System.Collections.Generic.IEnumerable<T3>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT3<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> System.Collections.Generic.IEnumerable<T3>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT3<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> System.Collections.Generic.IEnumerable<T3>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT3<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> System.Collections.Generic.IEnumerable<T3>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT3<T0, T1, T2, T3>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3>>! source) -> System.Collections.Generic.IEnumerable<T3>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT4<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> System.Collections.Generic.IEnumerable<T4>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT4<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> System.Collections.Generic.IEnumerable<T4>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT4<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> System.Collections.Generic.IEnumerable<T4>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT4<T0, T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4>>! source) -> System.Collections.Generic.IEnumerable<T4>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT5<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> System.Collections.Generic.IEnumerable<T5>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT5<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> System.Collections.Generic.IEnumerable<T5>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT5<T0, T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5>>! source) -> System.Collections.Generic.IEnumerable<T5>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT6<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> System.Collections.Generic.IEnumerable<T6>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT6<T0, T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6>>! source) -> System.Collections.Generic.IEnumerable<T6>!
static Olve.Utilities.CollectionExtensions.EnumerableOneOfExtensions.OfT7<T0, T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<OneOf.OneOf<T0, T1, T2, T3, T4, T5, T6, T7>>! source) -> System.Collections.Generic.IEnumerable<T7>!
static Olve.Utilities.CollectionExtensions.ISetExtensions.Set<T>(this System.Collections.Generic.ISet<T>! set, T item, bool value) -> bool
static Olve.Utilities.CollectionExtensions.ISetExtensions.Toggle<T>(this System.Collections.Generic.ISet<T>! set, T item) -> bool
static Olve.Utilities.CollectionExtensions.RandomExtensions.Shuffle<T>(this System.Collections.Generic.IEnumerable<T>! source) -> System.Collections.Generic.IEnumerable<T>!
static Olve.Utilities.Extensions.OneOfTryGetExtensions.GetT0OrDefault<T0, T1, T2>(this OneOf.OneOf<T0, T1, T2> oneOf, T0 defaultValue) -> T0
static Olve.Utilities.Extensions.OneOfTryGetExtensions.GetT0OrDefault<T0, T1>(this OneOf.OneOf<T0, T1> oneOf, T0 defaultValue) -> T0
static Olve.Utilities.Extensions.OneOfTryGetExtensions.GetT1OrDefault<T0, T1>(this OneOf.OneOf<T0, T1> oneOf, T1 defaultValue) -> T1
static Olve.Utilities.IntegerMath2D.DeltaPosition.operator *(Olve.Utilities.IntegerMath2D.DeltaPosition a, int scalar) -> Olve.Utilities.IntegerMath2D.DeltaPosition
static Olve.Utilities.IntegerMath2D.DeltaPosition.operator +(Olve.Utilities.IntegerMath2D.DeltaPosition a, Olve.Utilities.IntegerMath2D.DeltaPosition b) -> Olve.Utilities.IntegerMath2D.DeltaPosition
static Olve.Utilities.IntegerMath2D.DeltaPosition.operator -(Olve.Utilities.IntegerMath2D.DeltaPosition a, Olve.Utilities.IntegerMath2D.DeltaPosition b) -> Olve.Utilities.IntegerMath2D.DeltaPosition
static Olve.Utilities.IntegerMath2D.Position.implicit operator Olve.Utilities.IntegerMath2D.Position((int X, int Y) tuple) -> Olve.Utilities.IntegerMath2D.Position
static Olve.Utilities.IntegerMath2D.Position.operator +(Olve.Utilities.IntegerMath2D.Position a, Olve.Utilities.IntegerMath2D.DeltaPosition b) -> Olve.Utilities.IntegerMath2D.Position
static Olve.Utilities.IntegerMath2D.Position.operator -(Olve.Utilities.IntegerMath2D.Position a, Olve.Utilities.IntegerMath2D.Position b) -> Olve.Utilities.IntegerMath2D.DeltaPosition
static Olve.Utilities.IntegerMath2D.Size.implicit operator Olve.Utilities.IntegerMath2D.Size((int Width, int Height) tuple) -> Olve.Utilities.IntegerMath2D.Size
static Olve.Utilities.StringFormatting.DateTimeFormatter.FormatTimeAgo(System.DateTimeOffset now, System.DateTimeOffset then) -> string!
static Olve.Utilities.Types.Results.Result.Failure(params System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.ResultProblem!>! problems) -> Olve.Utilities.Types.Results.Result
static Olve.Utilities.Types.Results.Result.implicit operator Olve.Utilities.Types.Results.Result(Olve.Utilities.Types.Results.ResultProblem! problem) -> Olve.Utilities.Types.Results.Result
static Olve.Utilities.Types.Results.Result.implicit operator Olve.Utilities.Types.Results.Result(Olve.Utilities.Types.Results.ResultProblemCollection! problems) -> Olve.Utilities.Types.Results.Result
static Olve.Utilities.Types.Results.Result.Success() -> Olve.Utilities.Types.Results.Result
static Olve.Utilities.Types.Results.Result.Success<T>(T value) -> Olve.Utilities.Types.Results.Result<T>
static Olve.Utilities.Types.Results.Result<T>.Failure(params System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.ResultProblem!>! problems) -> Olve.Utilities.Types.Results.Result<T>
static Olve.Utilities.Types.Results.Result<T>.implicit operator Olve.Utilities.Types.Results.Result<T>(Olve.Utilities.Types.Results.ResultProblem! problem) -> Olve.Utilities.Types.Results.Result<T>
static Olve.Utilities.Types.Results.Result<T>.implicit operator Olve.Utilities.Types.Results.Result<T>(Olve.Utilities.Types.Results.ResultProblemCollection! problems) -> Olve.Utilities.Types.Results.Result<T>
static Olve.Utilities.Types.Results.Result<T>.implicit operator Olve.Utilities.Types.Results.Result<T>(T value) -> Olve.Utilities.Types.Results.Result<T>
static Olve.Utilities.Types.Results.Result<T>.Success(T value) -> Olve.Utilities.Types.Results.Result<T>
static Olve.Utilities.Types.Results.ResultEnumerableExtensions.GetProblems(this System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.Result>! results) -> System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.ResultProblem!>!
static Olve.Utilities.Types.Results.ResultEnumerableExtensions.GetProblems<T>(this System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.Result<T>>! results) -> System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.ResultProblem!>!
static Olve.Utilities.Types.Results.ResultEnumerableExtensions.GetValues<T>(this System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.Result<T>>! results) -> System.Collections.Generic.IEnumerable<T>!
static Olve.Utilities.Types.Results.ResultEnumerableExtensions.HasProblems(this System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.Result>! results) -> bool
static Olve.Utilities.Types.Results.ResultEnumerableExtensions.HasProblems<T>(this System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.Result<T>>! results) -> bool
static Olve.Utilities.Types.Results.ResultEnumerableExtensions.TryPickProblems<T>(this System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.Result<T>>! results, out Olve.Utilities.Types.Results.ResultProblemCollection! problems) -> bool
static Olve.Utilities.Types.Results.ResultEnumerableExtensions.TryPickProblems<T>(this System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.Result<T>>! results, out Olve.Utilities.Types.Results.ResultProblemCollection! problems, out System.Collections.Generic.IEnumerable<T>! values) -> bool
static Olve.Utilities.Types.Results.ResultFuncExtensions.ToResultFunc<T>(this System.Action<T>! action) -> System.Func<T, Olve.Utilities.Types.Results.Result>!
static Olve.Utilities.Types.Results.ResultProblemCollection.Merge(params System.Collections.Generic.IEnumerable<Olve.Utilities.Types.Results.ResultProblemCollection!>! problemCollections) -> Olve.Utilities.Types.Results.ResultProblemCollection!